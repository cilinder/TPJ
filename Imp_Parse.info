-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from Imp_Parse.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_imp_parse -> Com                            (0)
	Com -> loc ':=' AExp                               (1)
	Com -> if BExp then Com else Com                   (2)
	Com -> Com ';' Com                                 (3)
	Com -> skip                                        (4)
	Com -> while BExp do Com                           (5)
	Com -> '{' Com '}'                                 (6)
	AExp -> num                                        (7)
	AExp -> loc                                        (8)
	AExp -> AExp '+' AExp                              (9)
	AExp -> AExp '-' AExp                              (10)
	AExp -> AExp '*' AExp                              (11)
	AExp -> '(' AExp ')'                               (12)
	BExp -> boolean                                    (13)
	BExp -> AExp '~' AExp                              (14)
	BExp -> AExp '<' AExp                              (15)
	BExp -> BExp '&&' BExp                             (16)
	BExp -> BExp '||' BExp                             (17)
	BExp -> '!' BExp                                   (18)
	BExp -> '(' BExp ')'                               (19)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	if             { KEY "if" }
	then           { KEY "then" }
	else           { KEY "else" }
	while          { KEY "while" }
	do             { KEY "do" }
	skip           { KEY "skip" }
	'~'            { OP "==" }
	'<'            { OP "<" }
	'+'            { OP "+" }
	'-'            { OP "-" }
	'*'            { OP "*" }
	':='           { OP ":=" }
	'&&'           { OP "&&" }
	'||'           { OP "||" }
	'!'            { UOP "!" }
	'('            { PUNC "(" }
	')'            { PUNC ")" }
	'{'            { PUNC "{" }
	'}'            { PUNC "}" }
	';'            { PUNC ";" }
	num            { NUM $$ }
	boolean        { BOOLEAN $$ }
	loc            { LOC $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_imp_parse rule  0
	Com             rules 1, 2, 3, 4, 5, 6
	AExp            rules 7, 8, 9, 10, 11, 12
	BExp            rules 13, 14, 15, 16, 17, 18, 19

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	if             shift, and enter state 4
	while          shift, and enter state 5
	skip           shift, and enter state 6
	'{'            shift, and enter state 7
	loc            shift, and enter state 2

	Com            goto state 3

State 1


	loc            shift, and enter state 2


State 2

	Com -> loc . ':=' AExp                              (rule 1)

	':='           shift, and enter state 18


State 3

	%start_imp_parse -> Com .                           (rule 0)
	Com -> Com . ';' Com                                (rule 3)

	';'            shift, and enter state 17
	%eof           accept


State 4

	Com -> if . BExp then Com else Com                  (rule 2)

	'!'            shift, and enter state 11
	'('            shift, and enter state 12
	num            shift, and enter state 13
	boolean        shift, and enter state 14
	loc            shift, and enter state 15

	AExp           goto state 9
	BExp           goto state 16

State 5

	Com -> while . BExp do Com                          (rule 5)

	'!'            shift, and enter state 11
	'('            shift, and enter state 12
	num            shift, and enter state 13
	boolean        shift, and enter state 14
	loc            shift, and enter state 15

	AExp           goto state 9
	BExp           goto state 10

State 6

	Com -> skip .                                       (rule 4)

	else           reduce using rule 4
	'}'            reduce using rule 4
	';'            reduce using rule 4
	%eof           reduce using rule 4


State 7

	Com -> '{' . Com '}'                                (rule 6)

	if             shift, and enter state 4
	while          shift, and enter state 5
	skip           shift, and enter state 6
	'{'            shift, and enter state 7
	loc            shift, and enter state 2

	Com            goto state 8

State 8

	Com -> Com . ';' Com                                (rule 3)
	Com -> '{' Com . '}'                                (rule 6)

	'}'            shift, and enter state 34
	';'            shift, and enter state 17


State 9

	AExp -> AExp . '+' AExp                             (rule 9)
	AExp -> AExp . '-' AExp                             (rule 10)
	AExp -> AExp . '*' AExp                             (rule 11)
	BExp -> AExp . '~' AExp                             (rule 14)
	BExp -> AExp . '<' AExp                             (rule 15)

	'~'            shift, and enter state 29
	'<'            shift, and enter state 30
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32
	'*'            shift, and enter state 33


State 10

	Com -> while BExp . do Com                          (rule 5)
	BExp -> BExp . '&&' BExp                            (rule 16)
	BExp -> BExp . '||' BExp                            (rule 17)

	do             shift, and enter state 28
	'&&'           shift, and enter state 23
	'||'           shift, and enter state 24


State 11

	BExp -> '!' . BExp                                  (rule 18)

	'!'            shift, and enter state 11
	'('            shift, and enter state 12
	num            shift, and enter state 13
	boolean        shift, and enter state 14
	loc            shift, and enter state 15

	AExp           goto state 9
	BExp           goto state 27

State 12

	AExp -> '(' . AExp ')'                              (rule 12)
	BExp -> '(' . BExp ')'                              (rule 19)

	'!'            shift, and enter state 11
	'('            shift, and enter state 12
	num            shift, and enter state 13
	boolean        shift, and enter state 14
	loc            shift, and enter state 15

	AExp           goto state 25
	BExp           goto state 26

State 13

	AExp -> num .                                       (rule 7)

	then           reduce using rule 7
	else           reduce using rule 7
	do             reduce using rule 7
	'~'            reduce using rule 7
	'<'            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'&&'           reduce using rule 7
	'||'           reduce using rule 7
	')'            reduce using rule 7
	'}'            reduce using rule 7
	';'            reduce using rule 7
	%eof           reduce using rule 7


State 14

	BExp -> boolean .                                   (rule 13)

	then           reduce using rule 13
	do             reduce using rule 13
	'&&'           reduce using rule 13
	'||'           reduce using rule 13
	')'            reduce using rule 13


State 15

	AExp -> loc .                                       (rule 8)

	then           reduce using rule 8
	else           reduce using rule 8
	do             reduce using rule 8
	'~'            reduce using rule 8
	'<'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'&&'           reduce using rule 8
	'||'           reduce using rule 8
	')'            reduce using rule 8
	'}'            reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 16

	Com -> if BExp . then Com else Com                  (rule 2)
	BExp -> BExp . '&&' BExp                            (rule 16)
	BExp -> BExp . '||' BExp                            (rule 17)

	then           shift, and enter state 22
	'&&'           shift, and enter state 23
	'||'           shift, and enter state 24


State 17

	Com -> Com ';' . Com                                (rule 3)

	if             shift, and enter state 4
	while          shift, and enter state 5
	skip           shift, and enter state 6
	'{'            shift, and enter state 7
	loc            shift, and enter state 2

	Com            goto state 21

State 18

	Com -> loc ':=' . AExp                              (rule 1)

	'('            shift, and enter state 20
	num            shift, and enter state 13
	loc            shift, and enter state 15

	AExp           goto state 19

State 19

	Com -> loc ':=' AExp .                              (rule 1)
	AExp -> AExp . '+' AExp                             (rule 9)
	AExp -> AExp . '-' AExp                             (rule 10)
	AExp -> AExp . '*' AExp                             (rule 11)

	else           reduce using rule 1
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32
	'*'            shift, and enter state 33
	'}'            reduce using rule 1
	';'            reduce using rule 1
	%eof           reduce using rule 1


State 20

	AExp -> '(' . AExp ')'                              (rule 12)

	'('            shift, and enter state 20
	num            shift, and enter state 13
	loc            shift, and enter state 15

	AExp           goto state 46

State 21

	Com -> Com . ';' Com                                (rule 3)
	Com -> Com ';' Com .                                (rule 3)

	else           reduce using rule 3
	'}'            reduce using rule 3
	';'            reduce using rule 3
	%eof           reduce using rule 3


State 22

	Com -> if BExp then . Com else Com                  (rule 2)

	if             shift, and enter state 4
	while          shift, and enter state 5
	skip           shift, and enter state 6
	'{'            shift, and enter state 7
	loc            shift, and enter state 2

	Com            goto state 45

State 23

	BExp -> BExp '&&' . BExp                            (rule 16)

	'!'            shift, and enter state 11
	'('            shift, and enter state 12
	num            shift, and enter state 13
	boolean        shift, and enter state 14
	loc            shift, and enter state 15

	AExp           goto state 9
	BExp           goto state 44

State 24

	BExp -> BExp '||' . BExp                            (rule 17)

	'!'            shift, and enter state 11
	'('            shift, and enter state 12
	num            shift, and enter state 13
	boolean        shift, and enter state 14
	loc            shift, and enter state 15

	AExp           goto state 9
	BExp           goto state 43

State 25

	AExp -> AExp . '+' AExp                             (rule 9)
	AExp -> AExp . '-' AExp                             (rule 10)
	AExp -> AExp . '*' AExp                             (rule 11)
	AExp -> '(' AExp . ')'                              (rule 12)
	BExp -> AExp . '~' AExp                             (rule 14)
	BExp -> AExp . '<' AExp                             (rule 15)

	'~'            shift, and enter state 29
	'<'            shift, and enter state 30
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32
	'*'            shift, and enter state 33
	')'            shift, and enter state 42


State 26

	BExp -> BExp . '&&' BExp                            (rule 16)
	BExp -> BExp . '||' BExp                            (rule 17)
	BExp -> '(' BExp . ')'                              (rule 19)

	'&&'           shift, and enter state 23
	'||'           shift, and enter state 24
	')'            shift, and enter state 41


State 27

	BExp -> BExp . '&&' BExp                            (rule 16)
	BExp -> BExp . '||' BExp                            (rule 17)
	BExp -> '!' BExp .                                  (rule 18)

	then           reduce using rule 18
	do             reduce using rule 18
	'&&'           reduce using rule 18
	'||'           reduce using rule 18
	')'            reduce using rule 18


State 28

	Com -> while BExp do . Com                          (rule 5)

	if             shift, and enter state 4
	while          shift, and enter state 5
	skip           shift, and enter state 6
	'{'            shift, and enter state 7
	loc            shift, and enter state 2

	Com            goto state 40

State 29

	BExp -> AExp '~' . AExp                             (rule 14)

	'('            shift, and enter state 20
	num            shift, and enter state 13
	loc            shift, and enter state 15

	AExp           goto state 39

State 30

	BExp -> AExp '<' . AExp                             (rule 15)

	'('            shift, and enter state 20
	num            shift, and enter state 13
	loc            shift, and enter state 15

	AExp           goto state 38

State 31

	AExp -> AExp '+' . AExp                             (rule 9)

	'('            shift, and enter state 20
	num            shift, and enter state 13
	loc            shift, and enter state 15

	AExp           goto state 37

State 32

	AExp -> AExp '-' . AExp                             (rule 10)

	'('            shift, and enter state 20
	num            shift, and enter state 13
	loc            shift, and enter state 15

	AExp           goto state 36

State 33

	AExp -> AExp '*' . AExp                             (rule 11)

	'('            shift, and enter state 20
	num            shift, and enter state 13
	loc            shift, and enter state 15

	AExp           goto state 35

State 34

	Com -> '{' Com '}' .                                (rule 6)

	else           reduce using rule 6
	'}'            reduce using rule 6
	';'            reduce using rule 6
	%eof           reduce using rule 6


State 35

	AExp -> AExp . '+' AExp                             (rule 9)
	AExp -> AExp . '-' AExp                             (rule 10)
	AExp -> AExp . '*' AExp                             (rule 11)
	AExp -> AExp '*' AExp .                             (rule 11)

	then           reduce using rule 11
	else           reduce using rule 11
	do             reduce using rule 11
	'~'            reduce using rule 11
	'<'            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'&&'           reduce using rule 11
	'||'           reduce using rule 11
	')'            reduce using rule 11
	'}'            reduce using rule 11
	';'            reduce using rule 11
	%eof           reduce using rule 11


State 36

	AExp -> AExp . '+' AExp                             (rule 9)
	AExp -> AExp . '-' AExp                             (rule 10)
	AExp -> AExp '-' AExp .                             (rule 10)
	AExp -> AExp . '*' AExp                             (rule 11)

	then           reduce using rule 10
	else           reduce using rule 10
	do             reduce using rule 10
	'~'            reduce using rule 10
	'<'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            shift, and enter state 33
	'&&'           reduce using rule 10
	'||'           reduce using rule 10
	')'            reduce using rule 10
	'}'            reduce using rule 10
	';'            reduce using rule 10
	%eof           reduce using rule 10


State 37

	AExp -> AExp . '+' AExp                             (rule 9)
	AExp -> AExp '+' AExp .                             (rule 9)
	AExp -> AExp . '-' AExp                             (rule 10)
	AExp -> AExp . '*' AExp                             (rule 11)

	then           reduce using rule 9
	else           reduce using rule 9
	do             reduce using rule 9
	'~'            reduce using rule 9
	'<'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            shift, and enter state 33
	'&&'           reduce using rule 9
	'||'           reduce using rule 9
	')'            reduce using rule 9
	'}'            reduce using rule 9
	';'            reduce using rule 9
	%eof           reduce using rule 9


State 38

	AExp -> AExp . '+' AExp                             (rule 9)
	AExp -> AExp . '-' AExp                             (rule 10)
	AExp -> AExp . '*' AExp                             (rule 11)
	BExp -> AExp '<' AExp .                             (rule 15)

	then           reduce using rule 15
	do             reduce using rule 15
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32
	'*'            shift, and enter state 33
	'&&'           reduce using rule 15
	'||'           reduce using rule 15
	')'            reduce using rule 15


State 39

	AExp -> AExp . '+' AExp                             (rule 9)
	AExp -> AExp . '-' AExp                             (rule 10)
	AExp -> AExp . '*' AExp                             (rule 11)
	BExp -> AExp '~' AExp .                             (rule 14)

	then           reduce using rule 14
	do             reduce using rule 14
	'+'            shift, and enter state 31
	'-'            shift, and enter state 32
	'*'            shift, and enter state 33
	'&&'           reduce using rule 14
	'||'           reduce using rule 14
	')'            reduce using rule 14


State 40

	Com -> Com . ';' Com                                (rule 3)
	Com -> while BExp do Com .                          (rule 5)

	else           reduce using rule 5
	'}'            reduce using rule 5
	';'            shift, and enter state 17
	%eof           reduce using rule 5


State 41

	BExp -> '(' BExp ')' .                              (rule 19)

	then           reduce using rule 19
	do             reduce using rule 19
	'&&'           reduce using rule 19
	'||'           reduce using rule 19
	')'            reduce using rule 19


State 42

	AExp -> '(' AExp ')' .                              (rule 12)

	then           reduce using rule 12
	else           reduce using rule 12
	do             reduce using rule 12
	'~'            reduce using rule 12
	'<'            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'&&'           reduce using rule 12
	'||'           reduce using rule 12
	')'            reduce using rule 12
	'}'            reduce using rule 12
	';'            reduce using rule 12
	%eof           reduce using rule 12


State 43

	BExp -> BExp . '&&' BExp                            (rule 16)
	BExp -> BExp . '||' BExp                            (rule 17)
	BExp -> BExp '||' BExp .                            (rule 17)

	then           reduce using rule 17
	do             reduce using rule 17
	'&&'           shift, and enter state 23
	'||'           reduce using rule 17
	')'            reduce using rule 17


State 44

	BExp -> BExp . '&&' BExp                            (rule 16)
	BExp -> BExp '&&' BExp .                            (rule 16)
	BExp -> BExp . '||' BExp                            (rule 17)

	then           reduce using rule 16
	do             reduce using rule 16
	'&&'           reduce using rule 16
	'||'           reduce using rule 16
	')'            reduce using rule 16


State 45

	Com -> if BExp then Com . else Com                  (rule 2)
	Com -> Com . ';' Com                                (rule 3)

	else           shift, and enter state 47
	';'            shift, and enter state 17


State 46

	AExp -> AExp . '+' AExp                             (rule 9)
	AExp -> AExp . '-' AExp                             (rule 10)
	AExp -> AExp . '*' AExp                             (rule 11)
	AExp -> '(' AExp . ')'                              (rule 12)

	'+'            shift, and enter state 31
	'-'            shift, and enter state 32
	'*'            shift, and enter state 33
	')'            shift, and enter state 42


State 47

	Com -> if BExp then Com else . Com                  (rule 2)

	if             shift, and enter state 4
	while          shift, and enter state 5
	skip           shift, and enter state 6
	'{'            shift, and enter state 7
	loc            shift, and enter state 2

	Com            goto state 48

State 48

	Com -> if BExp then Com else Com .                  (rule 2)
	Com -> Com . ';' Com                                (rule 3)

	else           reduce using rule 2
	'}'            reduce using rule 2
	';'            shift, and enter state 17
	%eof           reduce using rule 2


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 20
Number of terminals: 23
Number of non-terminals: 4
Number of states: 49
